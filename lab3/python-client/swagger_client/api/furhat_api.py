# coding: utf-8

"""
    Furhat Remote API

    This is the Furhat Remote API, used to control the Furhat robot from e.g. Python. Note that the Furhat Remote API Skill needs to be running on the robot for it to work. Find out more at https://docs.furhat.io/remote-api  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: support@furhatrobotics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FurhatApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def furhat_attend_post(self, **kwargs):  # noqa: E501
        """Attend a user/location  # noqa: E501

        Provides 3 modes of attention.   1. Attend user based on enum (closest, other, random)   2. Attend user based on it's id (can be retrieved by using /furhat/users)   3. Attend location based on coordinates (x,y,z)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_attend_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Make Furhat attend a user (closest, other, random)
        :param str userid: Make Furhat attend a user specified by id
        :param str location: Make Furhat attend location, usage: x,y,z. Example -20.0,-5.0,23.0
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_attend_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_attend_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_attend_post_with_http_info(self, **kwargs):  # noqa: E501
        """Attend a user/location  # noqa: E501

        Provides 3 modes of attention.   1. Attend user based on enum (closest, other, random)   2. Attend user based on it's id (can be retrieved by using /furhat/users)   3. Attend location based on coordinates (x,y,z)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_attend_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Make Furhat attend a user (closest, other, random)
        :param str userid: Make Furhat attend a user specified by id
        :param str location: Make Furhat attend location, usage: x,y,z. Example -20.0,-5.0,23.0
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'userid', 'location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_attend_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'userid' in params:
            query_params.append(('userid', params['userid']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/attend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_face_post(self, **kwargs):  # noqa: E501
        """Change the texture and/or model  # noqa: E501

        Changes the mask and character, or model and texture (legacy), based on the property name. Case sensitive. Names can be retrieved from the web interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_face_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Change the model of the robot (legacy)
        :param str texture: Change the texture of the robot (legacy)
        :param str mask: Change the mask of the robot
        :param str character: Change the character of the robot
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_face_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_face_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_face_post_with_http_info(self, **kwargs):  # noqa: E501
        """Change the texture and/or model  # noqa: E501

        Changes the mask and character, or model and texture (legacy), based on the property name. Case sensitive. Names can be retrieved from the web interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_face_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Change the model of the robot (legacy)
        :param str texture: Change the texture of the robot (legacy)
        :param str mask: Change the mask of the robot
        :param str character: Change the character of the robot
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'texture', 'mask', 'character']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_face_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'texture' in params:
            query_params.append(('texture', params['texture']))  # noqa: E501
        if 'mask' in params:
            query_params.append(('mask', params['mask']))  # noqa: E501
        if 'character' in params:
            query_params.append(('character', params['character']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/face', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_gesture_post(self, **kwargs):  # noqa: E501
        """Perform a gesture  # noqa: E501

        Performs a gesture based on   1. Gesture name (retrieve by GET request to /furhat/gestures)   2. Gesture definition, see example  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_gesture_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The gesture to do
        :param bool blocking: Whether to wait until the gesture is performed (default false)
        :param GestureDefinition definition:
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_gesture_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_gesture_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_gesture_post_with_http_info(self, **kwargs):  # noqa: E501
        """Perform a gesture  # noqa: E501

        Performs a gesture based on   1. Gesture name (retrieve by GET request to /furhat/gestures)   2. Gesture definition, see example  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_gesture_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The gesture to do
        :param bool blocking: Whether to wait until the gesture is performed (default false)
        :param GestureDefinition definition:
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'blocking', 'definition']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_gesture_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'blocking' in params:
            query_params.append(('blocking', params['blocking']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'definition' in params:
            body_params = params['definition']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/gesture', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_gestures_get(self, **kwargs):  # noqa: E501
        """Get all gestures  # noqa: E501

        Returns a JSON array with all gestures on the system (names + duration).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_gestures_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Gesture]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_gestures_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_gestures_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_gestures_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all gestures  # noqa: E501

        Returns a JSON array with all gestures on the system (names + duration).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_gestures_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Gesture]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_gestures_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/gestures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Gesture]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_get(self, **kwargs):  # noqa: E501
        """Test connection  # noqa: E501

        Used to verify if the server is running, return \"hello world\" upon success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_get_with_http_info(self, **kwargs):  # noqa: E501
        """Test connection  # noqa: E501

        Used to verify if the server is running, return \"hello world\" upon success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_led_post(self, **kwargs):  # noqa: E501
        """Change the colour of the LED strip  # noqa: E501

        Changes the LED strip of the robot, colours can be between 0-255 (above 255 is changed to 255). Any parameter not provided defaults to 0.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_led_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int red: The amount of red
        :param int green: The amount of green
        :param int blue: The amount of blue
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_led_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_led_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_led_post_with_http_info(self, **kwargs):  # noqa: E501
        """Change the colour of the LED strip  # noqa: E501

        Changes the LED strip of the robot, colours can be between 0-255 (above 255 is changed to 255). Any parameter not provided defaults to 0.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_led_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int red: The amount of red
        :param int green: The amount of green
        :param int blue: The amount of blue
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['red', 'green', 'blue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_led_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'red' in params:
            query_params.append(('red', params['red']))  # noqa: E501
        if 'green' in params:
            query_params.append(('green', params['green']))  # noqa: E501
        if 'blue' in params:
            query_params.append(('blue', params['blue']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/led', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_listen_get(self, **kwargs):  # noqa: E501
        """Make the robot listen, and get speech results  # noqa: E501

        Blocking call to get user speech input, language defaults to english_US. Language parameter can be used to provide a different language. Return values can be found in the Status object as message and can be:   - User speech   - SILENCE   - INTERRUPTED   - FAILED   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_listen_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str language: The language to listen for, defaults to en-US
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_listen_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_listen_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_listen_get_with_http_info(self, **kwargs):  # noqa: E501
        """Make the robot listen, and get speech results  # noqa: E501

        Blocking call to get user speech input, language defaults to english_US. Language parameter can be used to provide a different language. Return values can be found in the Status object as message and can be:   - User speech   - SILENCE   - INTERRUPTED   - FAILED   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_listen_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str language: The language to listen for, defaults to en-US
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_listen_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/listen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_listen_stop_post(self, **kwargs):  # noqa: E501
        """Make the robot stop listening  # noqa: E501

        Aborts the listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_listen_stop_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_listen_stop_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_listen_stop_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_listen_stop_post_with_http_info(self, **kwargs):  # noqa: E501
        """Make the robot stop listening  # noqa: E501

        Aborts the listen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_listen_stop_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_listen_stop_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/listen/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_say_post(self, **kwargs):  # noqa: E501
        """Make the robot speak  # noqa: E501

        Makes the robot speak by either using text, or a URL (linking to a.wav file). If generatelipsync=true, it uses a .pho file hosted on the same url, or generates phonemes by itself.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_say_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: A string depicting a utterance the robot should say.
        :param str url: A url link to a audio file (.wav)
        :param bool blocking: Whether to wait until the speech is performed (default false)
        :param bool lipsync: If a URL is provided, indicate if lipsync files should be generated/looked for.
        :param bool abort: Stops the current speech of the robot.
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_say_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_say_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_say_post_with_http_info(self, **kwargs):  # noqa: E501
        """Make the robot speak  # noqa: E501

        Makes the robot speak by either using text, or a URL (linking to a.wav file). If generatelipsync=true, it uses a .pho file hosted on the same url, or generates phonemes by itself.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_say_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: A string depicting a utterance the robot should say.
        :param str url: A url link to a audio file (.wav)
        :param bool blocking: Whether to wait until the speech is performed (default false)
        :param bool lipsync: If a URL is provided, indicate if lipsync files should be generated/looked for.
        :param bool abort: Stops the current speech of the robot.
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'url', 'blocking', 'lipsync', 'abort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_say_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'blocking' in params:
            query_params.append(('blocking', params['blocking']))  # noqa: E501
        if 'lipsync' in params:
            query_params.append(('lipsync', params['lipsync']))  # noqa: E501
        if 'abort' in params:
            query_params.append(('abort', params['abort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/say', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_say_stop_post(self, **kwargs):  # noqa: E501
        """Make the robot stop talking  # noqa: E501

        Stops the current speech.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_say_stop_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_say_stop_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_say_stop_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_say_stop_post_with_http_info(self, **kwargs):  # noqa: E501
        """Make the robot stop talking  # noqa: E501

        Stops the current speech.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_say_stop_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_say_stop_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/say/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_users_get(self, **kwargs):  # noqa: E501
        """Get current users  # noqa: E501

        Get all current users (max: 2). Returns a JSON array containg Users (Rotation, Location, id).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_users_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get current users  # noqa: E501

        Get all current users (max: 2). Returns a JSON array containg Users (Rotation, Location, id).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_visibility_post(self, visible, **kwargs):  # noqa: E501
        """Fade in/out the face  # noqa: E501

        Triggers an animation which fades the face out to black, or in again, with a set duration in the range of (1,10000] ms. Invalid or missing durations will be set to the default value of 2000 ms. This command is only applicable to the FaceCore face engine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_visibility_post(visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool visible: Whether the face should be made visible or not (required)
        :param int duration: Duration of the fade animation in milliseconds
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_visibility_post_with_http_info(visible, **kwargs)  # noqa: E501
        else:
            (data) = self.furhat_visibility_post_with_http_info(visible, **kwargs)  # noqa: E501
            return data

    def furhat_visibility_post_with_http_info(self, visible, **kwargs):  # noqa: E501
        """Fade in/out the face  # noqa: E501

        Triggers an animation which fades the face out to black, or in again, with a set duration in the range of (1,10000] ms. Invalid or missing durations will be set to the default value of 2000 ms. This command is only applicable to the FaceCore face engine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_visibility_post_with_http_info(visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool visible: Whether the face should be made visible or not (required)
        :param int duration: Duration of the fade animation in milliseconds
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['visible', 'duration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_visibility_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'visible' is set
        if self.api_client.client_side_validation and ('visible' not in params or
                                                       params['visible'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `visible` when calling `furhat_visibility_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'visible' in params:
            query_params.append(('visible', params['visible']))  # noqa: E501
        if 'duration' in params:
            query_params.append(('duration', params['duration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/visibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_voice_post(self, name, **kwargs):  # noqa: E501
        """Set the voice of the robot  # noqa: E501

        Sets the voice of the robot using the name of the voice, can be requested by doing a GET request on this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_voice_post(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the voice (required)
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_voice_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.furhat_voice_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def furhat_voice_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Set the voice of the robot  # noqa: E501

        Sets the voice of the robot using the name of the voice, can be requested by doing a GET request on this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_voice_post_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the voice (required)
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_voice_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `furhat_voice_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/voice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def furhat_voices_get(self, **kwargs):  # noqa: E501
        """Get all the voices on the robot  # noqa: E501

        Returns a JSON array with voice names + languages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_voices_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Voice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.furhat_voices_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.furhat_voices_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def furhat_voices_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all the voices on the robot  # noqa: E501

        Returns a JSON array with voice names + languages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.furhat_voices_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Voice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method furhat_voices_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/furhat/voices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Voice]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
