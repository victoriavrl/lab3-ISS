# coding: utf-8

"""
    Furhat Remote API

    This is the Furhat Remote API, used to control the Furhat robot from e.g. Python. Note that the Furhat Remote API Skill needs to be running on the robot for it to work. Find out more at https://docs.furhat.io/remote-api  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: support@furhatrobotics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Gesture(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'duration': 'float'
    }

    attribute_map = {
        'name': 'name',
        'duration': 'duration'
    }

    def __init__(self, name=None, duration=None, _configuration=None):  # noqa: E501
        """Gesture - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._duration = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if duration is not None:
            self.duration = duration

    @property
    def name(self):
        """Gets the name of this Gesture.  # noqa: E501


        :return: The name of this Gesture.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Gesture.


        :param name: The name of this Gesture.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def duration(self):
        """Gets the duration of this Gesture.  # noqa: E501


        :return: The duration of this Gesture.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Gesture.


        :param duration: The duration of this Gesture.  # noqa: E501
        :type: float
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Gesture, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Gesture):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Gesture):
            return True

        return self.to_dict() != other.to_dict()
